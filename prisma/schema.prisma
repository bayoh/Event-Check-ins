// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Attendee {
  id            String         @id @default(uuid())
  firstName     String
  lastName      String
  email         String
  publicID      String         @unique
  phone         String?
  category      String?        // e.g., "VIP", "Speaker", "Regular"
  status        String         @default("active") // active, inactive, cancelled
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  assignedRooms AttendeeRoom[]
  checkIns      CheckIn[]
}

model Room {
  id          String         @id @default(uuid())
  name        String
  capacity    Int?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  assignedAttendees AttendeeRoom[]
  checkIns    CheckIn[]
}

model AttendeeRoom {
  id        String   @id @default(uuid())
  attendee  Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  attendeeId String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String
  createdAt DateTime @default(now())

  @@unique([attendeeId, roomId])
}

model CheckIn {
  id        String   @id @default(uuid())
  attendee  Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  attendeeId String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String
  checkedInAt DateTime @default(now())
  checkedOutAt DateTime?

  @@index([attendeeId])
  @@index([roomId])
}
